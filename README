
# 🧠 Ejercicios Técnicos .NET

Este repositorio contiene la solución a tres ejercicios técnicos diseñados para evaluar habilidades en desarrollo back-end con C#, .NET Core, AutoMapper, diseño de APIs REST y lógica de negocio.

---

## 📦 PRIMER EJERCICIO: AutoMapper Configuración para eShop

### 🧩 Contexto

Trabajas como desarrollador back-end en un servicio **eShop**, colaborando con un colega front-end para implementar un componente de pedidos.

### 🎯 Tareas

Configurar **AutoMapper** para mapear de modelos de base de datos a DTOs simplificados para la UI.

### 🔁 Requisitos de Mapping

#### OrderDto:

- `Id`: ❌ Ignorar (no mapear)
- `CustomerName`: ✔️ `Order.CustomerDetails.Name`
- `OrderDateFormatted`: ✔️ `Order.OrderDate.ToString("yyyy-MM-dd")` (ISO 8601)
- `OrderedProducts`: ✔️ Mapeo desde `Order.Products` a `IEnumerable<ProductDto>`
- `TenantInformation`: ✔️ Mapeo especial vía `ITenantResolver`

#### ProductDto:

- `Name`: ✔️ `Order.Products.Name`
- `Status`: ✔️ `"Available"` si `IsAvailable`, `"Not available"` si no
- `Price`: ✔️ Formato como `"$29.99"` (solo si `IsAvailable`)
- `CategoryList`: ✔️ Lista separada por comas de `Order.Product.Categories`

#### TenantInformation (Mapeo Especial):

- Origen: cache, no viene de DB
- Resolver: `ITenantResolver.Resolve(int id)`
- ID origen: `Order.CustomerDetails.TenantId`
- Campos: `Name`, `Address`, `Country` → `TenantDto`

---

### 📚 Modelos y DTOs

#### Modelos (`model/`):

```csharp
public class Order {
    public int Id { get; set; }
    public Customer CustomerDetails { get; set; } // Puede ser null
    public IEnumerable<Product> Products { get; set; }
    public DateTime OrderDate { get; set; }
}

public class Product {
    public string Name { get; set; }
    public decimal Price { get; set; }
    public bool IsAvailable { get; set; }
    public IEnumerable<Category> Categories { get; set; }
}
```

#### DTOs (`dto/`):

```csharp
public class OrderDto {
    public string CustomerName { get; set; }
    public string OrderDateFormatted { get; set; }
    public IEnumerable<ProductDto> OrderedProducts { get; set; }
    public TenantDto TenantInformation { get; set; }
}

public class ProductDto {
    public string Name { get; set; }
    public string Status { get; set; }
    public string Price { get; set; }
    public string CategoryList { get; set; }
}
```

---

### ⚙️ Restricciones Técnicas

- Lenguaje: C# 8.0 con .NET Core 3.1
- `Order.CustomerDetails` puede ser null
- Otros submodelos no son null
- `TenantId` siempre es válido
- `ITenantResolver.Resolve(id)` nunca retorna null

### 🗂 Estructura del Proyecto

- `dto/`
- `model/`
- `interface/`
- `start.cs` (configuración inicial)

---

## 🍕 SEGUNDO EJERCICIO: Costo Mínimo de Pedido de Pizza

### 🎯 Objetivo

Calcular el costo mínimo total de una orden de pizzas aplicando **como máximo uno** de los siguientes 4 descuentos, o sin aplicar ninguno.

---

### 🧱 Estructuras:

```csharp
public record Pizza(string name, int price_S, int price_M, int price_L);
public record OrderItem(string name, string size, int quantity);
```

### 🧠 Firma de la función:

```csharp
class Solution {
    public int solution(Pizza[] menu, OrderItem[] order) {
        // Tu lógica aquí
    }
}
```

---

### 💸 Descuentos

1. **Sin Descuento**  
2. **Descuento 1: "Compra 3, la más barata es gratis"**  
3. **Descuento 2: "Compra 5 del mismo tipo por 100"**  
4. **Descuento 3: "Por cada Large, una Small gratis"**  
5. **Descuento 4: "Compra 3 Large, paga como Medium"**  

---

## 🏬 TERCER EJERCICIO: API REST para Almacén

### 🧰 Requerimiento

Crear una API REST para controlar el stock de un almacén. Se deben permitir las siguientes operaciones:

### 🔧 Operaciones

- `GetProducts()`
- `SetProductCapacity(productId, capacity)`
- `ReceiveProduct(productId, quantity)`
- `DispatchProduct(productId, quantity)`

### 📏 Reglas de Negocio

- ❗ Las cantidades deben ser mayores a 0.
- ❌ No se puede definir una capacidad menor al stock actual.
- ❌ No se puede recibir si supera la capacidad máxima.
- ❌ No se puede despachar si no hay suficiente stock.

### 💬 Mensajes de Error

- `"NotPositiveQuantityMessage"`
- `"QuantityTooLowMessage"`
- `"QuantityTooHighMessage"`

### 🧱 Estructura Recomendada

```csharp
public class Product {
    public int Id { get; set; }
    public string Name { get; set; }
    public int Capacity { get; set; }
    public int Quantity { get; set; }
}
```

---
